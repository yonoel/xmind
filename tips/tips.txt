js
	由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示：
		注意：反引号在键盘的ESC下方，数字键1的左边：

	模板字符串
		要把多个字符串连接起来，可以用+号连接：
			如果有很多变量需要连接，用+号就比较麻烦。
			ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
			var name = '小明';
			var age = 20;
			var message = `你好, ${name}, 你今年${age}岁了!`;
			alert(message);
			
	需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：

	请注意，直接给Array的length赋一个新的值会导致Array大小的变化：
	
	Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array：

		concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里:
		
		arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]
	
	JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开
	
		如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：

			'name' in xiaoming; // true
			
		要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：

			xiaoming.hasOwnProperty('name'); // true
	
	最新的ES6规范引入了新的数据类型Map,Set
		var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);

			m.set('Adam', 67); // 添加新的key-value
			m.has('Adam'); // 是否存在key 'Adam': true
			m.get('Adam'); // 67
			m.delete('Adam'); // 删除key 'Adam'

		var s1 = new Set(); // 空Set
		var s2 = new Set([1, 2, 3]); // 含1, 2, 3
		var s = new Set([1, 2, 3, 3, '3']);
		s; // Set {1, 2, 3, "3"}
		s.add(4);
		s.delete(3);
	
		为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。
		
			具有iterable类型的集合可以通过新的for ... of循环来遍历。

			for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称,比如给一个array增加一个属性name，那么使用for..in，name也会被循环
			
			然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：
			var a = ['A', 'B', 'C'];

			a.forEach(function (element, index, array) {
				// element: 指向当前元素的值
				// index: 指向当前索引
				// array: 指向Array对象本身
				console.log(element + ', index = ' + index);
			});
			
			var s = new Set(['A', 'B', 'C']);
				s.forEach(function (element, sameElement, set) {
					console.log(element);
				});
				
			var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
				m.forEach(function (value, key, map) {
					console.log(value);
				});

		JavaScript还有一个免费赠送的关键字arguments，
		它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：
		
		function foo(x) {
			console.log('x = ' + x); // 10
			for (var i=0; i<arguments.length; i++) {
				console.log('arg ' + i + ' = ' + arguments[i]); // 10, 20, 30
			}
		}
		foo(10, 20, 30);
		
		rest参数 （由于JavaScript函数允许接收任意个参数，除了方法定义的参数以外的参数）
						function foo(a, b) {
				var i, rest = [];
				if (arguments.length > 2) {
					for (i = 2; i<arguments.length; i++) {
						rest.push(arguments[i]);
					}
				}
				console.log('a = ' + a);
				console.log('b = ' + b);
				console.log(rest);
			}
				--――改写为		function foo(a, b, ...rest) {
				console.log('a = ' + a);
				console.log('b = ' + b);
				console.log(rest);
			}

